from datetime import datetime, timezone
from pydantic import BaseModel, Field
from typing import Optional, Union
import uuid

import logging
log = logging.getLogger(__name__)

class LoRaMessage(BaseModel):
    """Model for LoRa message."""
    message_id: Optional[uuid.UUID] = Field(None, description="Message ID, new for each message to prevent duplicates. This is generated by the LoRa receiver if it is not included in the raw data.")
    sender: Optional[str] = Field(None, description="Recipient of the original LoRa message and the device making this POST to the server. Can be callsign or other, auto-generated as IP if not included.")
    raw_data: Union[dict, str, bytes] = Field(..., description="Raw data of the LoRa message. This is the raw data received from the LoRa receiver.")
    timestamp: datetime = Field(default_factory=lambda: datetime.now(timezone.utc), description="Timestamp of the message. Should be as close to the original timestamp as possible. If not included, the server will use the time of endpoint reception.")