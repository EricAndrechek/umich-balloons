services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    ports:
      - "127.0.0.1:80:80"
    volumes:
      - ./nginx/app.conf:/etc/nginx/conf.d/app.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      api:
        condition: service_healthy
    networks:
      - balloon_net
    restart: unless-stopped
  
  api:
    build: ./api
    container_name: api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - LOG_LEVEL=DEBUG
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DB_POOL_MIN_SIZE=1
      - DB_POOL_MAX_SIZE=10
      
      - REDIS_URL=${REDIS_URL}
      - REDIS_QUEUE_DB=${REDIS_QUEUE_DB}
      - REDIS_CACHE_DB=${REDIS_CACHE_DB}
    networks:
      - balloon_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s # Give FastAPI time to start
  
  # PostgreSQL Database
  postgres:
    image: postgis/postgis
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./sql/schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - balloon_net
    ports:
      - "5432:5432"
    healthcheck: # Basic check to see if Postgres is ready
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -q && psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'SELECT 1 FROM public.payloads LIMIT 1' -q -A -t"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s # Give Postgres time to start

  # Redis Service
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server
    volumes:
      - redis_data:/data
    networks:
      - balloon_net
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # aprs:
  #   build: ./aprs
  #   container_name: aprs
  #   depends_on:
  #     redis:
  #       condition: service_started
  #   environment:
  #     - REDIS_URL=${REDIS_URL}
  #   restart: unless-stopped
  #   networks:
  #     - balloon_net
  
  mosquitto:
    image: iegomez/mosquitto-go-auth:latest
    container_name: mosquitto
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
      # entrypoint for setting username and password
      - ./mosquitto/entrypoint.sh:/usr/local/bin/entrypoint.sh:ro
    environment:
      # Pass credentials from .env file for the entrypoint script to use
      - MQTT_BRIDGE_USERNAME=${MQTT_BRIDGE_USERNAME}
      - MQTT_BRIDGE_PASSWORD=${MQTT_BRIDGE_PASSWORD}
    # Override the default entrypoint/command to run your script
    entrypoint: /usr/local/bin/entrypoint.sh
    networks: 
      - balloon_net
    restart: unless-stopped
  
  mqtt-bridge:
    build: ./mqtt-bridge
    container_name: mqtt-bridge
    depends_on:
      - mosquitto
      - redis
    environment:
      - REDIS_URL=${REDIS_URL}
      - REDIS_QUEUE_DB=${REDIS_QUEUE_DB}
      - REDIS_CACHE_DB=${REDIS_CACHE_DB}

      - MQTT_BROKER_HOST=mosquitto # Service name
      - MQTT_BROKER_PORT=1883
      - MQTT_BRIDGE_USERNAME=${MQTT_BRIDGE_USERNAME} # Load from .env
      - MQTT_BRIDGE_PASSWORD=${MQTT_BRIDGE_PASSWORD} # Load from .env
    networks:
      - balloon_net
    restart: unless-stopped
  
  tasks:
    build: ./tasks
    container_name: tasks
    depends_on:
      - postgres
      - redis
    environment:
      - LOG_LEVEL=INFO
      - REDIS_URL=${REDIS_URL}
      - REDIS_QUEUE_DB=0
      - REDIS_CACHE_DB=1
      - CELERY_CONCURRENCY=4
      - TZ=America/Detroit

      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      # adjust to keep max connections >> (concurrency * number_of_app_replicas * (pool_size + max_overflow))
      - DB_POOL_SIZE=5                # Max persistent connections per worker process pool
      - DB_MAX_OVERFLOW=2             # Max extra temp connections per worker process pool
      - DB_POOL_RECYCLE=3600          # Recycle connections older than 1 hour (seconds)
    networks:
      - balloon_net
    restart: unless-stopped
  
  flower:
    build:
      context: ./tasks
      dockerfile: Dockerfile
    container_name: flower
    command: >
      celery --app=code.celery
      --broker=${REDIS_URL}
      flower
      --address=0.0.0.0
      --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=${REDIS_URL}
      - REDIS_QUEUE_DB=${REDIS_QUEUE_DB}
      - REDIS_CACHE_DB=${REDIS_CACHE_DB}
    depends_on:
      - redis
      # - tasks # can wait for tasks but can boot before that
    restart: unless-stopped
    networks:
      - balloon_net
    
networks:
  balloon_net:
    driver: bridge

volumes:
  pg_data:
  redis_data:
  nginx_logs: