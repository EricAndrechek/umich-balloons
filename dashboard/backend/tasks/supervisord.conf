# /app/supervisord.conf

[supervisord]
nodaemon=true              ; Run supervisord in the foreground, required for Docker containers.
loglevel=info              ; Set supervisord's own logging level (options: critical, error, warn, info, debug).
# user=celeryuser          ; Optional: Uncomment this line if you created and switched to 'celeryuser' in your Dockerfile.

# --- Watcher Process Configuration ---
# This process watches raw Redis lists and dispatches tasks to Celery.
[program:watcher]
command=python -u -m code.watcher ; Run the watcher module. '-u' ensures unbuffered Python stdout/stderr.
directory=/app                 ; Set the working directory for the process inside the container.
autostart=true                 ; Start this program automatically when supervisord starts.
autorestart=true               ; Restart this program automatically if it exits unexpectedly.
priority=997                   ; Optional: Lower priority means it might start slightly later / stop slightly earlier than others.
stopsignal=TERM                ; Signal used to stop the process (TERM is default and usually suitable).
stdout_logfile=/dev/stdout     ; Redirect the program's standard output to supervisord's stdout (captured by Docker).
stdout_logfile_maxbytes=0      ; Disable log rotation for stdout redirection (Docker handles rotation).
stderr_logfile=/dev/stderr     ; Redirect the program's standard error to supervisord's stderr (captured by Docker).
stderr_logfile_maxbytes=0      ; Disable log rotation for stderr redirection.
# user=celeryuser              ; Optional: Run this specific program as 'celeryuser' if defined in Dockerfile.

# --- Celery Worker Process Configuration ---
# This process executes the actual tasks received from the Celery queues.
[program:celeryworker]
# Command uses the Celery app instance defined in code/celery.py.
# Reads log level and concurrency from environment variables (set in Dockerfile/docker-compose).
# IMPORTANT: Ensure the -Q argument lists ALL queues these workers should consume.
command=celery -A code.celery worker --loglevel=%(ENV_LOG_LEVEL)s --concurrency=%(ENV_CELERY_CONCURRENCY)s -Q default,queue_aprs,queue_predictions,queue_iridium,queue_lora,queue_path_gen
directory=/app                 ; Set the working directory for the process.
autostart=true                 ; Start automatically.
autorestart=true               ; Restart automatically if it fails.
priority=998                   ; Optional: Slightly higher priority.
stopsignal=TERM                ; Signal used to stop the process. TERM allows Celery to attempt a graceful shutdown.
                               ; Consider QUIT for a "warm shutdown" if TERM causes issues with long-running tasks, but TERM is preferred.
stopwaitsecs=60                ; Optional: Max seconds supervisord waits for the process to stop gracefully after sending stopsignal before sending SIGKILL. Increase if your tasks need more time to finish.
stdout_logfile=/dev/stdout     ; Redirect stdout.
stdout_logfile_maxbytes=0      ; Disable rotation.
stderr_logfile=/dev/stderr     ; Redirect stderr.
stderr_logfile_maxbytes=0      ; Disable rotation.
# user=celeryuser              ; Optional: Run this specific program as 'celeryuser' if defined in Dockerfile.

# --- Celery Beat Process Configuration ---
# This process schedules periodic tasks based on the schedule defined in code/celery.py.
[program:celerybeat]
# Command uses the Celery app instance defined in code/celery.py.
# Reads log level from environment variable.
# Uses Celery's default scheduler unless --scheduler is specified.
# If using the default file-based scheduler, ensure its state is persisted if needed (e.g., via Docker volume for /app/celerybeat-schedule).
command=celery -A code.celery beat --loglevel=%(ENV_LOG_LEVEL)s
# Example using default scheduler with persistent file in WORKDIR:
# command=celery -A code.celery beat --loglevel=%(ENV_LOG_LEVEL)s --schedule=/app/celerybeat-schedule
directory=/app                 ; Set the working directory for the process.
autostart=true                 ; Start automatically.
autorestart=true               ; Restart automatically if it fails.
priority=999                   ; Optional: Highest priority.
stopsignal=TERM                ; Signal used to stop the process (TERM is usually sufficient for beat).
stdout_logfile=/dev/stdout     ; Redirect stdout.
stdout_logfile_maxbytes=0      ; Disable rotation.
stderr_logfile=/dev/stderr     ; Redirect stderr.
stderr_logfile_maxbytes=0      ; Disable rotation.
# user=celeryuser              ; Optional: Run this specific program as 'celeryuser' if defined in Dockerfile.